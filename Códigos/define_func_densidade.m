% Cria funções para método da Densidade
%São criadas as funções 
model.component('comp1').func.create('an1', 'Analytic');
model.component('comp1').func.create('an2', 'Analytic');
model.component('comp1').func.create('an3', 'Analytic');
model.component('comp1').func.create('an6', 'Analytic');
model.component('comp1').func.create('an7', 'Analytic');
model.component('comp1').func.create('int1', 'Interpolation');
model.component('comp1').func.create('an5', 'Analytic');
model.component('comp1').func.create('max', 'Analytic');
%Função degrau de Heaviside suavizada
model.component('comp1').func('an1').label('Heaviside Projection 1');
model.component('comp1').func('an1').set('funcname', 'projection1');
model.component('comp1').func('an1').set('expr', '(tanh(beta*(p-pb)) + tanh(beta*pb)) / (tanh(beta*(1-pb)) + tanh(beta*pb))');
model.component('comp1').func('an1').set('args', {'p'});
model.component('comp1').func('an1').set('plotargs', {'p' '0' '1'});
%Função SIMP para modelo de aço linear
model.component('comp1').func('an2').label('SIMP_linear');
model.component('comp1').func('an2').set('funcname', 'simp_linear');
model.component('comp1').func('an2').set('expr', '1+(ur_ferro-1)*(p^psimp)');
model.component('comp1').func('an2').set('args', {'p'});
model.component('comp1').func('an2').set('plotargs', {'p' '0' '1'});
%Função double SIMP
model.component('comp1').func('an6').label('Double_SIMP');
model.component('comp1').func('an6').set('funcname', 'Double_simp');
model.component('comp1').func('an6').set('expr', '(x^psimp)*((1-y)^psimp)');
model.component('comp1').func('an6').set('args', {'x' 'y'});
model.component('comp1').func('an6').set('plotargs', {'x' '0' '1'; 'y' '0' '1'});
%Função SIMP para modelo de aço não linear
model.component('comp1').func('an3').label('SIMP_nolinear');
model.component('comp1').func('an3').set('funcname', 'SIMP_nolinear');
model.component('comp1').func('an3').set('expr', '1-p^psimp+(p^psimp)*an5(H)');
model.component('comp1').func('an3').set('args', {'p' 'H'});
model.component('comp1').func('an3').set('argunit', '1,A/m');
model.component('comp1').func('an3').set('fununit', '1');
model.component('comp1').func('an3').set('plotargs', {'p' '0' '1'; 'H' '0' '316803.620'});
%Função SIMP a ser utilizada
model.component('comp1').func('an7').label('SIMP');
model.component('comp1').func('an7').set('funcname', 'simp');
model.component('comp1').func('an7').set('expr', 'simp_linear(p)');
model.component('comp1').func('an7').set('args', {'p' 'H'});
model.component('comp1').func('an7').set('plotargs', {'p' '0' '1'});
%Curva BH do aço não linear: Feita a partir da interpolação dos pontos
%passados pela Bakker Magnetics
model.component('comp1').func('int1').set('funcname', 'BH_Bakker');
model.component('comp1').func('int1').set('table', {'0.000' '0.000';  ...
'79.577' '0.212';  ...
'100.182' '0.266';  ...
'126.122' '0.332';  ...
'158.778' '0.414';  ...
'199.890' '0.514';  ...
'251.646' '0.632';  ...
'316.804' '0.768';  ...
'398.832' '0.917';  ...
'502.100' '1.070';  ...
'632.106' '1.214';  ...
'795.775' '1.335';  ...
'1001.821' '1.423';  ...
'1261.218' '1.481';  ...
'1587.779' '1.517';  ...
'1998.896' '1.545';  ...
'2516.461' '1.571';  ...
'3168.036' '1.602';  ...
'3988.321' '1.638';  ...
'5020.999' '1.680';  ...
'6321.063' '1.727';  ...
'7957.747' '1.777';  ...
'10018.210' '1.825';  ...
'12612.179' '1.871';  ...
'15877.793' '1.911';  ...
'19988.957' '1.947';  ...
'25164.606' '1.982';  ...
'31680.362' '2.018';  ...
'39883.213' '2.055';  ...
'50209.990' '2.093';  ...
'63210.632' '2.128';  ...
'79577.472' '2.162';  ...
'100182.101' '2.195';  ...
'126121.793' '2.230';  ...
'158777.930' '2.272';  ...
'199889.571' '2.324';  ...
'251646.061' '2.389';  ...
'316803.620' '2.471'});
model.component('comp1').func('int1').set('extrap', 'interior');
model.component('comp1').func('int1').set('defineinv', true);
model.component('comp1').func('int1').set('defineprimfun', true);
%Define a permeabilidade relativa a partir da curva BH interpolada
model.component('comp1').func('an5').set('expr', 'int1(x)/(x*mu0_const)');
model.component('comp1').func('an5').set('argunit', 'A/m');
model.component('comp1').func('an5').set('plotargs', {'x' '0' '316803.620'});

%Max function
model.component('comp1').func('max').set('expr', '0.5*(x+y+abs(x-y))');
model.component('comp1').func('max').label('Continuos max');
model.component('comp1').func('max').set('funcname', 'Max');
model.component('comp1').func('max').set('args', {'x' 'y'});
model.component('comp1').func('max').set('plotargs', {'x' '-1' '1'; 'y' '0' '1'});
